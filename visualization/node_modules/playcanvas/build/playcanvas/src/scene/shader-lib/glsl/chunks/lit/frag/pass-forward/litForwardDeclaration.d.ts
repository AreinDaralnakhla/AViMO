declare const _default: "\n\n// globals\nvec3 sReflection;\nvec3 dVertexNormalW;\nvec3 dTangentW;\nvec3 dBinormalW;\nvec3 dViewDirW;\nvec3 dReflDirW;\nvec3 ccReflDirW;\n\n// Per-light temporaries\nvec3 dLightDirNormW;\nfloat dAtten;\n\n// Outputs\nmat3 dTBN;\nvec4 dReflection;\nvec3 dDiffuseLight;\nvec3 dSpecularLight;\nfloat ccFresnel;\nvec3 ccReflection;\nvec3 ccSpecularLight;\nfloat ccSpecularityNoFres;\nvec3 sSpecularLight;\n\n// FRAGMENT SHADER INPUTS: UNIFORMS\n\n#ifdef LIT_DISPERSION\n    uniform float material_dispersion;\n#endif\n\n#ifndef LIT_OPACITY_FADES_SPECULAR\n    uniform float material_alphaFade;\n#endif\n\n#ifdef LIT_SSAO\n    uniform sampler2D ssaoTexture;\n    uniform vec2 ssaoTextureSizeInv;\n#endif\n\n// lighting and shadowing declarations\n\n#ifdef LIT_SHADOW_CATCHER\n    // a variable to accumulate shadows for shadow catcher materials\n    float dShadowCatcher = 1.0;\n#endif\n\n// LOOP - uniform declarations for all non-clustered lights\n#if LIGHT_COUNT > 0\n    #include \"lightDeclarationPS, LIGHT_COUNT\"\n#endif\n\n#ifdef LIT_SPECULAR\n    #if LIT_FRESNEL_MODEL == NONE && !defined(LIT_REFLECTIONS) && !defined(LIT_DIFFUSE_MAP) \n        #define LIT_OLD_AMBIENT\n    #endif\n#endif\n\n// lightmap baking\n#ifdef STD_LIGHTMAP_DIR\n    uniform float bakeDir;\n#endif\n#ifdef LIT_LIGHTMAP_BAKING_ADD_AMBIENT\n    uniform float ambientBakeOcclusionContrast;\n    uniform float ambientBakeOcclusionBrightness;\n#endif\n";
export default _default;
