declare const _default: "\n\n#include \"varyingsVS\"\n\n#include  \"litUserDeclarationVS\"\n\n#ifdef VERTEX_COLOR\n    attribute vec4 vertex_color;\n#endif\n\n#ifdef NINESLICED\n\n    varying vec2 vMask;\n    varying vec2 vTiledUv;\n\n    uniform mediump vec4 innerOffset;\n    uniform mediump vec2 outerScale;\n    uniform mediump vec4 atlasRect;\n\n#endif\n\nvec3 dPositionW;\nmat4 dModelMatrix;\n\n#include \"transformCoreVS\"\n\n#ifdef UV0\n    attribute vec2 vertex_texCoord0;\n    #include \"uv0VS\"\n#endif\n\n#ifdef UV1\n    attribute vec2 vertex_texCoord1;\n    #include \"uv1VS\"\n#endif\n\n\n#ifdef LINEAR_DEPTH\n    #ifndef VIEWMATRIX\n    #define VIEWMATRIX\n        uniform mat4 matrix_view;\n    #endif\n#endif\n\n#include \"transformVS\"\n\n#ifdef NORMALS\n    #include \"normalCoreVS\"\n    #include \"normalVS\"\n#endif\n\n#ifdef TANGENTS\n    attribute vec4 vertex_tangent;\n#endif\n\n// expand uniforms for uv transforms\n#include \"uvTransformUniformsPS, UV_TRANSFORMS_COUNT\"\n\n#ifdef MSDF\n    #include \"msdfVS\"\n#endif\n\n#include  \"litUserCodeVS\"\n\nvoid main(void) {\n\n    #include \"litUserMainStartVS\"\n\n    // default point size to 1 in case the shader is used with points\n    gl_PointSize = 1.0;\n\n    gl_Position = getPosition();\n    vPositionW = getWorldPosition();\n\n    #ifdef NORMALS\n        vNormalW = getNormal();\n    #endif\n\n    #ifdef TANGENTS\n        vTangentW = normalize(dNormalMatrix * vertex_tangent.xyz);\n        vBinormalW = cross(vNormalW, vTangentW) * vertex_tangent.w;\n    #elif defined(GGX_SPECULAR)\n        vObjectSpaceUpW = normalize(dNormalMatrix * vec3(0, 1, 0));\n    #endif\n\n    #ifdef UV0\n        vec2 uv0 = getUv0();\n        #ifdef UV0_UNMODIFIED\n            vUv0 = uv0;\n        #endif\n    #endif\n\n    #ifdef UV1\n        vec2 uv1 = getUv1();\n        #ifdef UV1_UNMODIFIED\n            vUv1 = uv1;\n        #endif\n    #endif\n\n    // expand code for uv transforms\n    #include \"uvTransformVS, UV_TRANSFORMS_COUNT\"\n\n    #ifdef VERTEX_COLOR\n        vVertexColor = vertex_color;\n    #endif\n\n    #ifdef LINEAR_DEPTH\n        // linear depth from the worldPosition, see getLinearDepth\n        vLinearDepth = -(matrix_view * vec4(vPositionW, 1.0)).z;\n    #endif\n\n    #ifdef MSDF\n        unpackMsdfParams();\n    #endif\n\n    #include \"litUserMainEndVS\"\n}\n";
export default _default;
