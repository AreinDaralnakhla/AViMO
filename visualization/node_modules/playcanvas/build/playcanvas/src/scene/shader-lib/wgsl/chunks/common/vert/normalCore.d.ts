declare const _default: "\n\nattribute vertex_normal: vec3f;\n\nuniform matrix_normal: mat3x3f;\n\n#ifdef MORPHING_NORMAL\n    #ifdef MORPHING_INT\n        var morphNormalTex: texture_2d<u32>;\n        var morphNormalTexSampler: sampler;\n    #else\n        var morphNormalTex: texture_2d<f32>;\n        var morphNormalTexSampler: sampler;\n    #endif\n#endif\n\nfn getLocalNormal(vertexNormal: vec3f) -> vec3f {\n\n    var localNormal: vec3f = vertexNormal;\n\n    #ifdef MORPHING_NORMAL\n\n        let morphUV: vec2i = getTextureMorphCoords();\n\n        #ifdef MORPHING_INT\n            let morphNormalInt: vec4u = textureLoad(morphNormalTex, morphUV, 0);\n            let morphNormalF: vec3f = vec3f(morphNormalInt.xyz) / 65535.0 * 2.0 - 1.0;\n            localNormal = localNormal + morphNormalF;\n        #else\n            let morphNormal: vec3f = textureLoad(morphNormalTex, morphUV, 0).xyz;\n            localNormal = localNormal + morphNormal;\n        #endif\n\n    #endif\n\n    return localNormal;\n}\n\n#if defined(SKIN) || defined(BATCH)\n    fn getNormalMatrix(modelMatrix: mat4x4f) -> mat3x3f {\n        return mat3x3f(modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz);\n    }\n#elif defined(INSTANCING)\n    fn getNormalMatrix(modelMatrix: mat4x4f) -> mat3x3f {\n        return mat3x3f(modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz);\n    }\n#else\n    fn getNormalMatrix(modelMatrix: mat4x4f) -> mat3x3f {\n        return uniform.matrix_normal;\n    }\n#endif\n";
export default _default;
