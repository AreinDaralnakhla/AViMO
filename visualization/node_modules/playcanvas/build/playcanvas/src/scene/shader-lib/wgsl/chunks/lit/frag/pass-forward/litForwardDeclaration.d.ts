declare const _default: "\n\n// globals\nvar<private> sReflection: vec3f;\nvar<private> dVertexNormalW: vec3f;\nvar<private> dTangentW: vec3f;\nvar<private> dBinormalW: vec3f;\nvar<private> dViewDirW: vec3f;\nvar<private> dReflDirW: vec3f;\nvar<private> ccReflDirW: vec3f;\n\n// Per-light temporaries\nvar<private> dLightDirNormW: vec3f;\nvar<private> dAtten: f32;\n\n// Outputs\nvar<private> dTBN: mat3x3f;\nvar<private> dReflection: vec4f;\nvar<private> dDiffuseLight: vec3f;\nvar<private> dSpecularLight: vec3f;\nvar<private> ccFresnel: f32;\nvar<private> ccReflection: vec3f;\nvar<private> ccSpecularLight: vec3f;\nvar<private> ccSpecularityNoFres: f32;\nvar<private> sSpecularLight: vec3f;\n\n// FRAGMENT SHADER INPUTS: UNIFORMS\n\n#ifdef LIT_DISPERSION\n    uniform material_dispersion: f32;\n#endif\n\n#ifndef LIT_OPACITY_FADES_SPECULAR\n    uniform material_alphaFade: f32;\n#endif\n\n#ifdef LIT_SSAO\n    var ssaoTexture : texture_2d<f32>;\n    var ssaoTextureSampler : sampler;\n    uniform ssaoTextureSizeInv: vec2f;\n#endif\n\n// lighting and shadowing declarations\n\n#ifdef LIT_SHADOW_CATCHER\n    // a variable to accumulate shadows for shadow catcher materials\n    var<private> dShadowCatcher: f32 = 1.0;\n#endif\n\n// LOOP - uniform declarations for all non-clustered lights\n#if LIGHT_COUNT > 0\n    #include \"lightDeclarationPS, LIGHT_COUNT\"\n#endif\n\n#ifdef LIT_SPECULAR\n    #if LIT_FRESNEL_MODEL == NONE && !defined(LIT_REFLECTIONS) && !defined(LIT_DIFFUSE_MAP) \n        #define LIT_OLD_AMBIENT\n    #endif\n#endif\n\n// lightmap baking\n#ifdef STD_LIGHTMAP_DIR\n    uniform bakeDir: f32;\n#endif\n#ifdef LIT_LIGHTMAP_BAKING_ADD_AMBIENT\n    uniform ambientBakeOcclusionContrast: f32;\n    uniform ambientBakeOcclusionBrightness: f32;\n#endif\n";
export default _default;
