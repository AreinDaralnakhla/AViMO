declare const _default: "\n    #ifdef COLOR_LUT\n        var colorLUT: texture_2d<f32>;\n        var colorLUTSampler: sampler;\n        uniform colorLUTParams: vec4f; // width, height, maxColor, intensity\n\n        fn applyColorLUT(color: vec3f) -> vec3f {\n            var c: vec3f = clamp(color, vec3f(0.0), vec3f(1.0));\n\n            let width: f32 = uniform.colorLUTParams.x;\n            let height: f32 = uniform.colorLUTParams.y;\n            let maxColor: f32 = uniform.colorLUTParams.z;\n\n            // Calculate blue axis slice\n            let cell: f32 = c.b * maxColor;\n            let cell_l: f32 = floor(cell);\n            let cell_h: f32 = ceil(cell);\n\n            // Half-texel offsets\n            let half_px_x: f32 = 0.5 / width;\n            let half_px_y: f32 = 0.5 / height;\n\n            // Red and green offsets within a tile\n            let r_offset: f32 = half_px_x + c.r / height * (maxColor / height);\n            let g_offset: f32 = half_px_y + c.g * (maxColor / height);\n\n            // texture coordinates for the two blue slices\n            let uv_l: vec2f = vec2f(cell_l / height + r_offset, g_offset);\n            let uv_h: vec2f = vec2f(cell_h / height + r_offset, g_offset);\n\n            // Sample both and interpolate\n            let color_l: vec3f = textureSampleLevel(colorLUT, colorLUTSampler, uv_l, 0.0).rgb;\n            let color_h: vec3f = textureSampleLevel(colorLUT, colorLUTSampler, uv_h, 0.0).rgb;\n\n            let lutColor: vec3f = mix(color_l, color_h, fract(cell));\n            return mix(color, lutColor, uniform.colorLUTParams.w);\n        }\n    #endif\n";
export default _default;
