declare const _default: "\n\n    // all passes handle opacity\n    #if LIT_BLEND_TYPE != NONE || defined(LIT_ALPHA_TEST) || defined(LIT_ALPHA_TO_COVERAGE) || STD_OPACITY_DITHER != NONE\n        #include \"opacityPS\"\n\n        #if defined(LIT_ALPHA_TEST)\n            #include \"alphaTestPS\"\n        #endif\n\n        // dithering\n        #if STD_OPACITY_DITHER != NONE\n            #include \"opacityDitherPS\"\n        #endif\n    #endif\n\n    #ifdef FORWARD_PASS // ----------------\n\n        // parallax\n        #ifdef STD_HEIGHT_MAP\n            #include \"parallaxPS\"\n        #endif\n\n        // diffuse\n        #include  \"diffusePS\"\n\n        // normal\n        #ifdef LIT_NEEDS_NORMAL\n            #include \"normalMapPS\"\n        #endif\n\n        // refraction\n        #ifdef LIT_REFRACTION\n            #include \"transmissionPS\"\n            #include \"thicknessPS\"\n        #endif\n\n        // iridescence\n        #ifdef LIT_IRIDESCENCE\n            #include \"iridescencePS\"\n            #include \"iridescenceThicknessPS\"\n        #endif\n\n        // specularity & glossiness\n        #ifdef LIT_SPECULAR_OR_REFLECTION\n\n            // sheen\n            #ifdef LIT_SHEEN\n                #include \"sheenPS\"\n                #include \"sheenGlossPS\"\n            #endif\n\n            // metalness\n            #ifdef LIT_METALNESS\n                #include \"metalnessPS\"\n                #include \"iorPS\"\n            #endif\n\n            // specularity factor\n            #ifdef LIT_SPECULARITY_FACTOR\n                #include \"specularityFactorPS\"\n            #endif\n\n            // specular color\n            #ifdef STD_SPECULAR_COLOR\n                #include \"specularPS\"\n            #else\n                fn getSpecularity() { \n                    dSpecularity = vec3f(1.0, 1.0, 1.0);\n                }\n            #endif\n\n            // gloss\n            #include \"glossPS\"\n        #endif\n\n        // ao\n        #ifdef STD_AO\n            #include \"aoPS\"\n        #endif\n\n        // emission\n        #include \"emissivePS\"\n\n        // clearcoat\n        #ifdef LIT_CLEARCOAT\n            #include \"clearCoatPS\"\n            #include \"clearCoatGlossPS\"\n            #include \"clearCoatNormalPS\"\n        #endif\n\n        // anisotropy\n        #if defined(LIT_SPECULAR) && defined(LIT_LIGHTING) && defined(LIT_GGX_SPECULAR)\n            #include \"anisotropyPS\"\n        #endif\n\n        // lightmap\n        #if defined(STD_LIGHTMAP) || defined(STD_LIGHT_VERTEX_COLOR)\n            #include \"lightmapPS\"\n        #endif\n    #endif\n\n    fn evaluateFrontend() {\n\n        // all passes handle opacity\n        #if LIT_BLEND_TYPE != NONE || defined(LIT_ALPHA_TEST) || defined(LIT_ALPHA_TO_COVERAGE) || STD_OPACITY_DITHER != NONE\n            getOpacity();\n\n            #if defined(LIT_ALPHA_TEST)\n                alphaTest(dAlpha);\n            #endif\n\n            #if STD_OPACITY_DITHER != NONE\n                opacityDither(dAlpha, 0.0);\n            #endif\n\n            litArgs_opacity = dAlpha;\n        #endif\n\n        #ifdef FORWARD_PASS // ----------------\n\n            // parallax\n            #ifdef STD_HEIGHT_MAP\n                getParallax();\n            #endif\n\n            // diffuse\n            getAlbedo();\n            litArgs_albedo = dAlbedo;\n\n            // normal\n            #ifdef LIT_NEEDS_NORMAL\n                getNormal();\n                litArgs_worldNormal = dNormalW;\n            #endif\n\n            // refraction\n            #ifdef LIT_REFRACTION\n                getRefraction();\n                litArgs_transmission = dTransmission;\n\n                getThickness();\n                litArgs_thickness = dThickness;\n\n                #ifdef LIT_DISPERSION\n                    litArgs_dispersion = uniform.material_dispersion;\n                #endif\n            #endif\n\n            // iridescence\n            #ifdef LIT_IRIDESCENCE\n                getIridescence();\n                getIridescenceThickness();\n                litArgs_iridescence_intensity = dIridescence;\n                litArgs_iridescence_thickness = dIridescenceThickness;\n            #endif\n\n            // specularity & glossiness\n            #ifdef LIT_SPECULAR_OR_REFLECTION\n\n                // sheen\n                #ifdef LIT_SHEEN\n                    getSheen();\n                    litArgs_sheen_specularity = sSpecularity;\n                    getSheenGlossiness();\n                    litArgs_sheen_gloss = sGlossiness;\n                #endif\n\n                // metalness\n                #ifdef LIT_METALNESS\n                    getMetalness();\n                    litArgs_metalness = dMetalness;\n                    getIor();\n                    litArgs_ior = dIor;\n                #endif\n\n                // specularity factor\n                #ifdef LIT_SPECULARITY_FACTOR\n                    getSpecularityFactor();\n                    litArgs_specularityFactor = dSpecularityFactor;\n                #endif\n\n                // gloss\n                getGlossiness();\n                getSpecularity();\n                litArgs_specularity = dSpecularity;\n                litArgs_gloss = dGlossiness;\n            #endif\n\n            // ao\n            #ifdef STD_AO\n                getAO();\n                litArgs_ao = dAo;\n            #endif\n\n            // emission\n            getEmission();\n            litArgs_emission = dEmission;\n\n            // clearcoat\n            #ifdef LIT_CLEARCOAT\n                getClearCoat();\n                getClearCoatGlossiness();\n                getClearCoatNormal();\n                litArgs_clearcoat_specularity = ccSpecularity;\n                litArgs_clearcoat_gloss = ccGlossiness;\n                litArgs_clearcoat_worldNormal = ccNormalW;\n            #endif\n\n            // anisotropy\n            #if defined(LIT_SPECULAR) && defined(LIT_LIGHTING) && defined(LIT_GGX_SPECULAR)\n                getAnisotropy();\n            #endif\n\n            // lightmap\n            #if defined(STD_LIGHTMAP) || defined(STD_LIGHT_VERTEX_COLOR)\n                getLightMap();\n                litArgs_lightmap = dLightmap;\n\n                #ifdef STD_LIGHTMAP_DIR\n                    litArgs_lightmapDir = dLightmapDir;\n                #endif\n            #endif\n        #endif\n    }\n";
export default _default;
