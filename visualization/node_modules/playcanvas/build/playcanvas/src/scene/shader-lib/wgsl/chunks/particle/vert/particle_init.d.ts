declare const _default: "\nattribute particle_vertexData: vec4f; // XYZ = particle position, W = particle ID + random factor\n#if defined(USE_MESH)\n    #if defined(USE_MESH_UV)\n        attribute particle_uv: vec2f;         // mesh UV\n    #else\n        var<private> particle_uv: vec2f = vec2f(0.0, 0.0);\n    #endif\n#endif\n\nuniform matrix_viewProjection: mat4x4f;\nuniform matrix_model: mat4x4f;\nuniform matrix_normal: mat3x3f;\nuniform matrix_viewInverse: mat4x4f;\n\n#ifndef VIEWMATRIX\n    #define VIEWMATRIX\n    uniform matrix_view: mat4x4f;\n#endif\n\nuniform numParticles: f32;\nuniform numParticlesPot: f32;\nuniform graphSampleSize: f32;\nuniform graphNumSamples: f32;\nuniform stretch: f32;\nuniform wrapBounds: vec3f;\nuniform emitterScale: vec3f;\nuniform emitterPos: vec3f;\nuniform faceTangent: vec3f;\nuniform faceBinorm: vec3f;\nuniform rate: f32;\nuniform rateDiv: f32;\nuniform lifetime: f32;\nuniform deltaRandomnessStatic: f32;\nuniform scaleDivMult: f32;\nuniform alphaDivMult: f32;\nuniform seed: f32;\nuniform delta: f32;\n\nvar particleTexOUT: texture_2d<f32>;\nvar particleTexOUTSampler: sampler;\nvar particleTexIN: texture_2d<f32>;\nvar particleTexINSampler: sampler;\n\n#ifdef PARTICLE_GPU\n    var internalTex0: texture_2d<f32>;\n    var internalTex0Sampler: sampler;\n    var internalTex1: texture_2d<f32>;\n    var internalTex1Sampler: sampler;\n    var internalTex2: texture_2d<f32>;\n    var internalTex2Sampler: sampler;\n#endif\n\n#ifndef CAMERAPLANES\n    #define CAMERAPLANES\n    uniform camera_params: vec4f;\n#endif\n\nvarying texCoordsAlphaLife: vec4f;\n\nvar<private> inPos: vec3f;\nvar<private> inVel: vec3f;\nvar<private> inAngle: f32;\nvar<private> inShow: bool;\nvar<private> inLife: f32;\n";
export default _default;
